.container
	h3 Transaktion
	if this.transaction
		Context(target=this.transaction)
			.form-horizontal
				Binding(name="date")
					FormGroup(label="Datum" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Date
				Binding(name="comment")
					FormGroup(label="Kommentar" labelClass="col-sm-2" wrapperClass="col-sm-10")
						Input(type="text")
	if this.bookings
		table.table.table-striped
			thead
				tr
					th Von
					th Nach
					th Betrag
					th(width="100") MwSt
					th
			tbody
				each booking in this.bookings
					Context(target=booking onChange=this.onBookingChanged.bind(this,booking))
						tr
							td
								Binding(name="from" onChange=this.autoAdd.bind(this,booking))
									Account(period=this.props.period)
							td
								Binding(name="to")
									Account(period=this.props.period)
							td
								Binding(name="amount")
									Number
							td(width="100")
								if this.canHaveTax(booking)
									Binding(name="tax")
										Number
							td(style="width:40px")
								.btn.btn-danger(onClick=this.removeBooking.bind(this,booking))
									.glyphicon.glyphicon-trash
				tr
					td(colSpan="3")
					td
						.btn.btn-default(onClick=this.addBooking.bind(this))
							.glyphicon.glyphicon-plus
	.btn-toolbar.pull-right
		if this.transaction && this.transaction.id
			.btn.btn-danger(onClick=this.delete.bind(this)) LÃ¶schen
		.btn.btn-primary(onClick=this.save.bind(this)) Speichern
script(section="body").
	constructor(p,c){
		super(p,c);
		this.componentWillReceiveProps(p);
	}
	async componentWillReceiveProps(p){
		this.deletedBookings = [];
		this.accounts = (await client.getAccounts({period:this.props.period})).reduce((index,account)=>{
			index[account.id] = account;
			return index;
		},{});
		if(p.transaction == "new"){
			this.transaction = {
				period: this.props.period,
				date:null,
				comment:""
			}
			this.bookings = [];
		}else{
			[this.transaction,this.bookings] = await Promise.all([
				client.getTransaction(p.transaction),
				client.getBookings({transaction:p.transaction})
			]);
			for(var booking of this.bookings){
				var taxBooking = this.bookings.filter(b=>b.id == booking.taxBooking)[0];
				if(taxBooking){
					this.bookings.splice(this.bookings.indexOf(taxBooking),1);
				}
				delete booking.transactionDate;
				delete booking.transactionComment;
				delete booking.fromName;
				delete booking.toName;
			}
		}
		this.addBooking();
	}
	
	canHaveTax(booking){
		var type1 = booking.from && this.accounts[booking.from].type;
		var type2 = booking.to && this.accounts[booking.to].type;
		return (type1 === 0 && type2 === 0) || (type1 === 1 && type2 === 0) || (type1 === 0 && type2 === 1);
	}
	
	onBookingChanged(booking){
		if(!this.canHaveTax(booking)) booking.tax = null;
		if(!booking.tax) booking.tax = null;
		this.forceUpdate();
	}
	
	autoAdd(booking){
		if(this.bookings.indexOf(booking) != this.bookings.length-1) return;
		this.addBooking();
	}
	
	addBooking(){
		this.bookings.push({
			from: null,
			to: null,
			amount: null,
			tax: null,
			taxBooking: null
		})
		this.forceUpdate();
	}
	
	removeBooking(booking){
		this.bookings.splice(this.bookings.indexOf(booking),1);
		this.forceUpdate();
		if(booking.id) this.deletedBookings.push(booking);
	}
	
	async save(){
		for(var account in this.accounts){
			if(this.accounts[account].tax){
				if(this.accounts[account].active){
					var taxActive = account;
				}else{
					var taxPassive = account;
				}
			}
		}
		var created = false;
		if(this.transaction.id){
			await client.updateTransaction(this.transaction.id,this.transaction);
		}else{
			this.transaction.id = await client.createTransaction(this.transaction);
			created = true;
		}
		for(var booking of this.bookings){
			if(!booking.from && !booking.to && !booking.amount){
				if(booking.id) this.deletedBookings.push(booking);
				continue;
			}
			
			if(booking.tax){
				var type1 = booking.from && this.accounts[booking.from].type;
				var type2 = booking.to && this.accounts[booking.to].type;
				var taxBooking = {
					transaction:this.transaction.id,
					amount: decimal(booking.amount).div(100).mul(booking.tax)
				}
				if((type1 === 0 && type2 === 0) || (type1 === 1 && type2 === 0)){
					taxBooking.from = taxActive;
					taxBooking.to = booking.from;
				}else if(type1 === 0 && type2 === 1){
					taxBooking.from = booking.to;
					taxBooking.to = taxPassive;
				}
				if(booking.taxBooking){
					await client.updateBooking(booking.taxBooking,taxBooking);
				}else{
					booking.taxBooking = await client.createBooking(taxBooking);
				}
			}else if(booking.taxBooking){
				booking.taxBooking = null;
				await client.deleteBooking(booking.taxBooking);
			}
			
			
			booking.transaction = this.transaction.id;
			if(!booking.id){
				booking.id = await client.createBooking(booking);
			}else{
				await client.updateBooking(booking.id,booking);
			}
		}
		for(var booking of this.deletedBookings){
			if(booking.taxBooking) await client.deleteBooking(booking.taxBooking);
			await client.deleteBooking(booking.id);
		}
		this.deletedBookings = [];
		if(created) this.props.onCreate(this.transaction.id);
	}
	
	async delete(){
		await client.deleteTransaction(this.props.transaction);
		history.back();
	}
script.
	var client = require("./client");
	var {Context,Binding} = require("react-bicon");
	var FormGroup = require("./formgroup");
	var Input = require("./input");
	var Date = require("./datefield");
	var Account = require("./AccountSelect");
	var Number = require("./number");
	var decimal = require("decimal.js");
