.app
	div(style="minHeight:100%;marginBottom:-60px;paddingBottom:60px;boxSizing:border-box")
		Navbar
			Header
				Brand 
					a(onClick=this.goTo.bind(this,"/")) Accounty
				Toggle
			Collapse(fixedTop)
				if this.props.params.period
					Nav
						each name in Object.keys(menu)
							NavItem(active=(location.pathname == "/"+this.props.params.period+menu[name]) onClick=this.goTo.bind(this,"/"+this.props.params.period+menu[name]))= name
				Nav(pullRight)
					NavDropdown(title=((this.periods||[]).filter(p=>(p.id+"")==this.props.params.period)[0]||{name:"Übersicht"}).name)
						MenuItem(onClick=this.goTo.bind(this,"/"))= "Übersicht"
						each period in this.periods
							MenuItem(onClick=this.goTo.bind(this,"/"+period.id+"/transactions"))= period.name				
		- var route = this.props.route
		if route.name == "404"
			.container
				h4 404 - Seite nicht gefunden
		else
			case route.name
				when "home"
					= route.render({onSelect:this.showPeriod.bind(this,false)})
				when "period"
					= route.render({period:this.props.params.period, onCreate:this.showPeriod.bind(this,true), onImport:this.showImport.bind(this)})
				when "accounts"
					= route.render({period:this.props.params.period, onSelect:this.showAccount.bind(this,false)})
				when "account"
					= route.render({period:this.props.params.period, account:this.props.params.account, onCreate:this.showAccount.bind(this,true)})
				when "transactions"
					= route.render({period:this.props.params.period, onSelect:this.showTransaction.bind(this,false)})
				when "transaction"
					= route.render({period:this.props.params.period, transaction:this.props.params.transaction,onCreate:this.showTransaction.bind(this,true)})
				when "journal"
					= route.render({period:this.props.params.period, onSelect:b=>this.showTransaction(false,b.transaction)})
				when "incomestatement"
				when "balance"
					= route.render({period:this.props.params.period})
				when "import"
					= route.render({period:this.props.params.period, onImport: this.goTo.bind(this,"/"+this.props.params.period+"/transactions",true)})
script(section="body").
	constructor(props,context){
		super(props,context);
		this.componentWillReceiveProps(props);
	}
	async componentWillReceiveProps(props){
		this.periods = await client.getPeriods({});
		this.forceUpdate();
	}
	goTo(path,replace,e){
		this.props.location[replace?"replace":"push"](path);
	}
	showPeriod(replace,period){
		this.goTo("/"+period,replace);
	}
	showAccount(replace,account){
		this.goTo("/"+this.props.params.period+"/accounts/"+account,replace);
	}
	showTransaction(replace,account){
		this.goTo("/"+this.props.params.period+"/transactions/"+account,replace);
	}
	showImport(){
		this.goTo("/"+this.props.params.period+"/import");
	}
script.
	var client = require("./client");
	var Navbar = require("react-bootstrap/lib/Navbar");
	var {Collapse,Toggle,Brand,Header} = Navbar;
	var Nav = require("react-bootstrap/lib/Nav");
	var NavItem = require("react-bootstrap/lib/NavItem");
	var {Router} = require("react-route-system");
	var NavDropdown = require("react-bootstrap/lib/NavDropdown");
	var MenuItem = require("react-bootstrap/lib/MenuItem");
	
	Component.router = new Router()
		.add("home","",require("./periods"))
		.add("period","/:period",require("./period"))
		.add("accounts","/:period/accounts",require("./accounts"))
		.add("account","/:period/accounts/:account",require("./account"))
		.add("transactions","/:period/transactions",require("./transactions"))
		.add("transaction","/:period/transactions/:transaction",require("./transaction"))
		.add("journal","/:period/journal",require("./journal"))
		.add("incomestatement","/:period/incomestatement",require("./incomestatement"))
		.add("balance","/:period/balance",require("./balance"))
		.add("import","/:period/import",require("./import"))
		.add("404","*")
	
	var menu = {
		"Zeitraum":"",
		"Konti":"/accounts",
		"Transaktionen":"/transactions",
		"Journal":"/journal",
		"Erfolgsrechung":"/incomestatement",
		"Bilanz":"/balance"
	}
